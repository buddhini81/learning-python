# -*- coding: utf-8 -*-
"""UsingNumPy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14aO39ANt4r2wdUo-1Qua8uD5bMl8nLw2
"""

import numpy as np

#Create Arrays

temperatures = np.array([20,22,25,27,21,23,30,26,24,28])
sales = np.array([15,20,35,45,18,25,60,40,30,50])

print(temperatures)
print(sales)

#Calculate Statistics
avg_temp = temperatures.mean()
print(avg_temp)

max_sales = sales.max()
print(max_sales)

#Reshape
data_matrix = np.column_stack((temperatures,sales))

print(data_matrix)

#boolean indexing

mask = sales > 30

temp_on_high_sales_days = temperatures[mask]

print(temp_on_high_sales_days)

mask2 = temperatures > 25
sales_on_hot_days = sales[mask2]
print(sales_on_hot_days)

x = data_matrix[(mask2) & (mask)]
print(x)

#Data Generation and Initial Calculations
#Create a NumPy array named closing_prices containing 20 random floating-point numbers between 100.0 and 150.0. (Hint: Use np.random.uniform).
closing_prices = np.random.uniform(100.0, 150.0, 20)

print(closing_prices)

#Calculate the daily price change (return) by subtracting yesterday's price from today's price. Store this in an array called daily_returns.
daily_returns = np.diff(closing_prices)
print(daily_returns)

#Calculate the cumulative sum of the daily_returns array and store it in cumulative_change
cumulative_change = np.cumsum(daily_returns)
print(cumulative_change)

#Advanced Indexing and Analysis
#Use boolean indexing on the daily_returns array to find out how many days the stock price increased (i.e., the return was positive).

#method 1
positive_days = [r for r in daily_returns if r > 0]

print(len(positive_days))

#method 2
num_positive_days = (daily_returns > 0).sum()

print(num_positive_days)

#Find the indices (positions) of the top 5 largest positive daily returns.

# np.argsort returns indices sorted by value (ascending)
# [-5:] gets the last 5 indices (the largest values)
# [::-1] reverses that slice to show them from largest to smallest return
top_5_indices = np.argsort(daily_returns)[-5:][::-1]
top_five_largest_positive_gains = daily_returns[top_5_indices]

print(top_five_largest_positive_gains)

#Use the indices from the daily_returns array to find the closing price on the day before the single largest negative drop (i.e., the index of the minimum value in daily_returns)
worst_day_index = np.argmin(daily_returns)
price_before_worst_day = closing_prices[worst_day_index]

print(price_before_worst_day)