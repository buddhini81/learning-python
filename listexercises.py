# -*- coding: utf-8 -*-
"""ListExercises.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1py6O-qcnOreEI-qq_3MAZtWGNKcROfEB

Lists
"""

# Here is your raw data
sales_data = [100.50, 20.00, None, 50.00, 100.50, 75.25, None, 20.00]

# 1. Remove None values
cleaned_data = [x for x in sales_data if x is not None]

# 2. Use a set to remove duplicates and then convert back to a list
unique_sales = list(set(cleaned_data))

# 3. Count how many unique items were sold
total_unique_items = len(unique_sales)

# 4. Calculate the sum of all sales after cleaning
total_sales = sum(unique_sales)

print(f"Total unique items sold: {total_unique_items}")
print(f"Total sales: {total_sales}")

weekly_temperatures_celsius = [18, 22, 25, 19, 21, 28, 17]

hot_temperatures_celsius = [temp for temp in weekly_temperatures_celsius if temp > 20]

hot_temperatures_fahrenheit = [(temp * 9/5) + 32 for temp in hot_temperatures_celsius]

hot_temperatures_fahrenheit

# Here is your raw data
user_statuses = ["active", "offline", "away", "active", "online", "away"]

def update_status(status_list, old_status, new_status):
    new_statuses = [new_status if status == old_status else status for status in status_list]
    return new_statuses

updated_list = update_status(user_statuses, "away", "online")
print(updated_list)

# Here is your raw data
daily_temperatures = [25, 26, 23, 27, 25, 28, 29, 26, 24, 23, 25, 26, 27, 28, 29, 30, 31, 29, 28, 27]

def analyze_temperatures(temp_list) :
    average_temp = sum(daily_temperatures)/len(daily_temperatures)
    higest_temp = max(daily_temperatures)
    lowest_temp = min(daily_temperatures)
    return (average_temp, higest_temp,lowest_temp )

analyzed_data = analyze_temperatures(daily_temperatures)

print(f"Average: {analyzed_data[0]:.2f}")
print(f"Highest: {analyzed_data[1]}")
print(f"Lowest: {analyzed_data[2]}")

# Here is your raw data
favorite_colors = ["blue", "red", "green", "blue", "yellow", "red", "blue", "purple"]

def count_frequencies(input_list):
  color_counts = {}
  for color in input_list:
    if color in color_counts:
      count = color_counts[color]
      color_counts[color] = count + 1
    else:
      color_counts[color] = 1

  return color_counts

color_counts = count_frequencies(favorite_colors)

print(color_counts)

# Here is your raw data
todo_list = [
    {'task': 'Buy groceries', 'completed': False},
    {'task': 'Clean the house', 'completed': True},
    {'task': 'Walk the dog', 'completed': False},
    {'task': 'Pay bills', 'completed': False}
]


def mark_task_completed(task_list, task_name):
  for index, value in enumerate(task_list):
    #print(item['completed'])
    if(value['task'] == task_name):
      todo_list[index]['completed'] = True


def get_incomplete_tasks(task_list):
  incomplete_tasks = []
  for item in task_list:
    if item['completed'] == False:
      incomplete_tasks.append(item['task'])
  return incomplete_tasks

mark_task_completed(todo_list, 'Walk the dog')
remaining_tasks = get_incomplete_tasks(todo_list)

print(remaining_tasks)